diff --git a/setup.py b/setup.py
index 09c8650..b98349f 100644
--- a/setup.py
+++ b/setup.py
@@ -1,11 +1,86 @@
 from setuptools import setup
 from torch.utils.cpp_extension import BuildExtension, CUDAExtension
 
+import subprocess
+import os
 import os.path as osp
 
 
 ROOT = osp.dirname(osp.abspath(__file__))
 
+
+# Initialize gcc major version
+gcc_major_version = 0
+
+# Get the version of g++
+try: 
+    # Run the command to get the g++ version
+    result = subprocess.run(['g++', '--version'], capture_output=True, text=True)
+    if result.returncode == 0:
+        # Extract version from the output
+        version_line = result.stdout.splitlines()[0]
+        version = version_line.split()[-1]  # The last element is the version
+        print(f"g++ version: {version}")
+
+        # Check if the version supports C++20 (g++ 10 and above support it)
+        gcc_major_version = int(version.split('.')[0])
+        print(f"gcc major version: {gcc_major_version}")
+    else:
+        print("Failed to get g++ version")        
+except Exception as e:
+    print(f"Failed to get g++ version: {e}")
+    
+
+def get_supported_architectures():
+    # Use `nvcc --list-gpu-arch` to list supported architectures
+    try:
+        result = subprocess.run(["nvcc", "--list-gpu-arch"], capture_output=True, text=True)
+        if result.returncode == 0:
+            architectures = result.stdout.splitlines()
+            return [arch.split('_')[1] for arch in architectures if arch.startswith("compute_")]
+        else:
+            print("Could not retrieve architectures. Using defaults.")
+    except FileNotFoundError:
+        print("nvcc not found. Make sure CUDA is installed and in PATH.")
+    # Return a default list if nvcc is unavailable
+    return ["60", "61", "70", "75", "80", "86"]
+
+
+
+cxx_compiler_flags = ['-O2','-fPIC']
+
+if os.name == 'nt':
+    cxx_compiler_flags.append("/wd4624")
+
+# Check nvcc version and set the appropriate flags.
+# Make sure that the nvcc executable is available in $PATH variables,
+# or find one according to the $CUDA_HOME variable
+try:
+    nvcc_std = subprocess.run("nvcc -h | grep -- '--std'", shell=True, capture_output=True, text=True)
+    nvcc_std_output = nvcc_std.stdout
+    
+    nvcc_flags = ['-O2', '-allow-unsupported-compiler']
+    if 'c++20' in nvcc_std_output and gcc_major_version >= 10:
+        nvcc_flags.append('-std=c++20')
+        cxx_compiler_flags.append('-std=c++20')
+    elif 'c++17' in nvcc_std_output:
+        nvcc_flags.append('-std=c++17')
+        cxx_compiler_flags.append('-std=c++17')
+    elif 'c++14' in nvcc_std_output:
+        nvcc_flags.append('-std=c++14')
+        cxx_compiler_flags.append('-std=c++14')
+except Exception as e:
+    print(f"Failed to get nvcc version: {e}")
+    nvcc_flags = ['-O2', '-allow-unsupported-compiler']  # Default flags if nvcc check fails
+    
+supported_architectures = get_supported_architectures()
+for arch in supported_architectures:
+    nvcc_flags.append(f"-gencode=arch=compute_{arch},code=sm_{arch}")
+
+    
+print(f"nvcc flags: {nvcc_flags}")
+print(f"cxx flags: {cxx_compiler_flags}")
+    
 setup(
     name='lietorch',
     version='0.2',
@@ -22,15 +97,8 @@ setup(
                 'lietorch/src/lietorch_gpu.cu',
                 'lietorch/src/lietorch_cpu.cpp'],
             extra_compile_args={
-                'cxx': ['-O2'], 
-                'nvcc': ['-O2',
-                    '-gencode=arch=compute_60,code=sm_60', 
-                    '-gencode=arch=compute_61,code=sm_61', 
-                    '-gencode=arch=compute_70,code=sm_70', 
-                    '-gencode=arch=compute_75,code=sm_75',
-                    '-gencode=arch=compute_75,code=compute_75',
-                    
-                ]
+                'cxx': cxx_compiler_flags, 
+                'nvcc': nvcc_flags
             }),
 
         CUDAExtension('lietorch_extras', 
@@ -43,15 +111,8 @@ setup(
                 'lietorch/extras/extras.cpp',
             ],
             extra_compile_args={
-                'cxx': ['-O2'], 
-                'nvcc': ['-O2',
-                    '-gencode=arch=compute_60,code=sm_60', 
-                    '-gencode=arch=compute_61,code=sm_61', 
-                    '-gencode=arch=compute_70,code=sm_70', 
-                    '-gencode=arch=compute_75,code=sm_75',
-                    '-gencode=arch=compute_75,code=compute_75',
-                    
-                ]
+                'cxx': cxx_compiler_flags, 
+                'nvcc': nvcc_flags
             }),
     ],
     cmdclass={ 'build_ext': BuildExtension }
